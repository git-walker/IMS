<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.rootyu.rad.modules.stafrocktype.dao.StaFrockDao">
    
	<sql id="staFrockColumns">
		b.id AS "id",
		a.id AS "stationId",
		b.frock_id AS "frockId",
		b.create_by AS "createBy.id",
		b.create_date AS "createDate",
		b.update_by AS "updateBy.id",
		b.update_date AS "updateDate",
		b.remarks AS "remarks",
		b.del_flag AS "delFlag",
		c.standard AS "frock.standard",
		c.frock_num AS "frock.frocknum",
		wk.gzzxbm AS "workstationcode"
	</sql>
	<sql id="staFrockJoins">
		left JOIN llm_sta_frock  b ON  a.id= b.STATION_ID
		left JOIN llm_frock c ON  b.FROCK_ID= c.id
		LEFT JOIN llm_wk wk ON wk.id=a.pk_wkcenter
	</sql>
	<select id="get" resultType="staFrock">
		SELECT 
			<include refid="staFrockColumns"/>
		FROM llm_wkstadoc a
		<include refid="staFrockJoins"/>
		WHERE a.id = #{id} and a.frocktype = '2'
	</select>
	
	<select id="findList" resultType="staFrock">
		SELECT 
			<include refid="staFrockColumns"/>
		FROM llm_wkstadoc a
		<include refid="staFrockJoins"/>
		<where>
				a.frocktype = '2'
			<if test="stationId != null and stationId != ''">
				AND a.station_id = #{stationId}
			</if>

		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findAllList" resultType="staFrock">
		SELECT 
			<include refid="staFrockColumns"/>
		FROM llm_wkstadoc a
		<include refid="staFrockJoins"/>
		<where>
			
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO llm_sta_frock(
			id,
			station_id,
			frock_id,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			del_flag
		) VALUES (
			#{id},
			#{stationId},
			#{frockId},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE llm_sta_frock SET 	
			station_id = #{stationId},
			frock_id = #{frockId},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE llm_sta_frock SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	<update id="deleteMatch" parameterType="String">
		UPDATE llm_sta_frock SET 
			del_flag = '1'
		WHERE station_id = #{workStationId}
	</update>
	
	<select id="getNotMatchFrockList" parameterType="String" resultType="java.util.HashMap">
	select c.FROCK_NUM frockNum,c.id,c.standard  from llm_frock c where c.id not in (select a.frock_id from llm_sta_frock a where a.del_flag = '0') and c.del_flag = '0'
	</select>
	<select id="getMatchFrockList" parameterType="String"  resultType="java.util.HashMap">
	select c.FROCK_NUM  frockNum,c.id,c.standard  from llm_frock c where c.id in (select a.frock_id from llm_sta_frock a where a.station_id = #{workStationId} and a.del_flag = '0') and c.del_flag = '0'
	</select>
	<select id="checkValues" resultType="StaFrock"
		parameterType="String">
		SELECT 
		<include refid="staFrockColumns" />
		FROM llm_sta_frock a
		<include refid="staFrockJoins" />
		<where>
			a.id=#{id}
		</where>
	</select>
</mapper>